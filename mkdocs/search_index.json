{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to ProxyBuilder\n\n\nHere we will describe the ProxyBuilder from \ngithub.com/ProxyBuilder/proxybuilder\n\n\nWhat are Proxies ?\n\n\nIf you want to have an overview of the Proxy-Pattern itself I can recommend\nthe following sources.\n\n\n \n\n\n\n \n \nJavaOne 2015 Tutorial - Proxy DeepDive\n \n from \nSven Ruppert\n \n\n\nWhat goal we want to reach?\n\n\nThis project was born, because I had to work a lot with old huge projects. The only thing I could rely on, is the pure JDK.\nSo I started playing with different Design Patterns and figured out, that Proxies are one of the most powerful pattern group for me.\nDuring the time I was writing the german Book \n\"Dynamic Proxies\"\n with \nDr. Heinz Kabutz\n I started to write examples. Step by step the examples are more generic and the \nProxyBuilder\n - project was born. \n\n\nSome Examples\n\n\nTo have an idea what you could do with the \nProxyBuilder\n I will show here some examples. The more detailed \ninformation you can find in the special sections of this website. This project is based on \nJava8\n.\n\n\nSome Examples with DynamicProxies\n\n\nHere are some examples based on the \nDynamicProxy\n. But we have created \ngenerated static\n versions too...\n\n\nVirtual Proxy\n\n\nfinal DemoLogic original = new DemoLogic();\nfinal DemoInterface demoLogic = VirtualProxyBuilder\n        .createBuilder(DemoInterface.class, original)\n        .build();\n\n\n\n\nSecurity Proxy\n\n\nfinal DemoLogic original = new DemoLogic();\nfinal DemoInterface demoLogic = VirtualProxyBuilder\n        .createBuilder(DemoInterface.class, original)\n        .addSecurityRule(() -\n false)\n        .build();\n\n\n\n\nfinal InnerDemoClass original = new InnerDemoClass();\n    final InnerDemoInterface demoLogic = VirtualProxyBuilder\n        .createBuilder(InnerDemoInterface.class, original)\n        .addSecurityRule(() -\n true)\n        .addSecurityRule(() -\n true)\n        .addSecurityRule(() -\n false)\n        .build();\n\n\n\n\nMetrics Proxy\n\n\n    final InnerDemoClass original = new InnerDemoClass();\n    final InnerDemoInterface demoLogic = VirtualProxyBuilder\n        .createBuilder(InnerDemoInterface.class, original)\n        .addMetrics()\n        .build();\n\n\n\n\n\nHow to bootstrap your project?\n\n\nIf you want to be as near as possible at the actual development version, you could use this. If you need a more stable version\nchange the version numbers to the last stable one.\n\n\nIf you want to start with the \nDynamicProxyBuilder\n creating for example \nVirtualProxies\n bundled with some other things\nyou need the following dependency in your pom.xml:\n\n\n    \ndependency\n\n      \ngroupId\norg.rapidpm.proxybuilder\n/groupId\n\n      \nartifactId\nrapidpm-proxybuilder-modules-dynamic\n/artifactId\n\n      \nversion\n${rapidpm.version}\n/version\n\n    \n/dependency\n\n\n\n\n\nThe \nProxyBuilder\n includes the \nKotlin\n runtime libs and \nMetrics\n from Dropwizard. \n\n\nVirtualProxy with one PreAction\n\n\nThis will be a \nVirtualProxy\n with a \nPreAction\n. You can add as many \nPreActions\n as you need. \nEvery \nPreAction\n will be executed before every method invocation in the order the \nPreAction\n was added.\n\n\npublic class ProxyDemoV001 {\n\n  public static void main(String[] args) {\n\n    final Service service = DynamicProxyBuilder\n        .createBuilder(Service.class, new ServiceImpl())\n        .addIPreAction((original, method, args1) \n                        -\n System.out.println(\n PreAction = \n + System.nanoTime()))\n        .build();\n\n    System.out.println(\nproxy created \n + System.nanoTime());\n    System.out.println(\ns = \n + service.doWork(\nGo..\n));\n  }\n\n  public interface Service {\n    String doWork(String str);\n  }\n\n  public static class ServiceImpl implements Service {\n    public ServiceImpl() {\n      System.out.println(\n ServiceImpl =\n constructor... \n + System.nanoTime());\n    }\n\n    @Override\n    public String doWork(final String str) {\n      return str + \n orig..\n;\n    }\n  }\n\n}\n\n\n\n\n\nVirtualProxy with Metrics\n\n\npublic class ProxyDemoV002 {\n\n  public static void main(String[] args) {\n    RapidPMMetricsRegistry.getInstance().startConsoleReporter();\n\n    final Service service = DynamicProxyBuilder\n        .createBuilder(Service.class, new ServiceImpl())\n        .addMetrics()\n        .build();\n\n    System.out.println(\nproxy created \n + System.nanoTime());\n    final long count = IntStream.range(0, 10_000_000)\n        .boxed()\n        .map(i -\n service.doWork(\nGo..\n + i))\n        .count();\n    System.out.println(\ns = \n + service.doWork(\nGo..\n));\n    System.out.println(\ncount = \n + count);\n  }\n\n\n  public interface Service {\n    String doWork(String str);\n  }\n\n  public static class ServiceImpl implements Service {\n    public ServiceImpl() {\n      System.out.println(\n ServiceImpl =\n constructor... \n + System.nanoTime());\n    }\n    @Override\n    public String doWork(final String str) {\n      return str + \n orig..\n;\n    }\n  }\n}\n\n\n\n\nTo bootstrap your project with the latest SNAPSHOT you need to add the SNAPSHOT-repository that is available at maven - central.\n\nHere our \nTeamCity\n will push regularly the binaries. \nIf you are using maven you could add the following to your \nsettings.xml\n to get the snapshots that are available at maven-central. \n\n\n   \nprofile\n\n      \nid\nallow-snapshots\n/id\n\n      \nactivation\n\n        \nactiveByDefault\ntrue\n/activeByDefault\n\n      \n/activation\n\n      \nrepositories\n\n        \nrepository\n\n          \nid\nsnapshots-repo\n/id\n\n          \nurl\nhttps://oss.sonatype.org/content/repositories/snapshots\n/url\n\n          \nreleases\n\n            \nenabled\nfalse\n/enabled\n\n          \n/releases\n\n          \nsnapshots\n\n            \nenabled\ntrue\n/enabled\n\n            \nupdatePolicy\nalways\n/updatePolicy\n\n          \n/snapshots\n\n        \n/repository\n\n      \n/repositories\n\n    \n/profile", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-proxybuilder", 
            "text": "Here we will describe the ProxyBuilder from  github.com/ProxyBuilder/proxybuilder", 
            "title": "Welcome to ProxyBuilder"
        }, 
        {
            "location": "/#what-are-proxies", 
            "text": "If you want to have an overview of the Proxy-Pattern itself I can recommend\nthe following sources.         JavaOne 2015 Tutorial - Proxy DeepDive    from  Sven Ruppert", 
            "title": "What are Proxies ?"
        }, 
        {
            "location": "/#what-goal-we-want-to-reach", 
            "text": "This project was born, because I had to work a lot with old huge projects. The only thing I could rely on, is the pure JDK.\nSo I started playing with different Design Patterns and figured out, that Proxies are one of the most powerful pattern group for me.\nDuring the time I was writing the german Book  \"Dynamic Proxies\"  with  Dr. Heinz Kabutz  I started to write examples. Step by step the examples are more generic and the  ProxyBuilder  - project was born.", 
            "title": "What goal we want to reach?"
        }, 
        {
            "location": "/#some-examples", 
            "text": "To have an idea what you could do with the  ProxyBuilder  I will show here some examples. The more detailed \ninformation you can find in the special sections of this website. This project is based on  Java8 .  Some Examples with DynamicProxies  Here are some examples based on the  DynamicProxy . But we have created  generated static  versions too...  Virtual Proxy  final DemoLogic original = new DemoLogic();\nfinal DemoInterface demoLogic = VirtualProxyBuilder\n        .createBuilder(DemoInterface.class, original)\n        .build();  Security Proxy  final DemoLogic original = new DemoLogic();\nfinal DemoInterface demoLogic = VirtualProxyBuilder\n        .createBuilder(DemoInterface.class, original)\n        .addSecurityRule(() -  false)\n        .build();  final InnerDemoClass original = new InnerDemoClass();\n    final InnerDemoInterface demoLogic = VirtualProxyBuilder\n        .createBuilder(InnerDemoInterface.class, original)\n        .addSecurityRule(() -  true)\n        .addSecurityRule(() -  true)\n        .addSecurityRule(() -  false)\n        .build();  Metrics Proxy      final InnerDemoClass original = new InnerDemoClass();\n    final InnerDemoInterface demoLogic = VirtualProxyBuilder\n        .createBuilder(InnerDemoInterface.class, original)\n        .addMetrics()\n        .build();", 
            "title": "Some Examples"
        }, 
        {
            "location": "/#how-to-bootstrap-your-project", 
            "text": "If you want to be as near as possible at the actual development version, you could use this. If you need a more stable version\nchange the version numbers to the last stable one.  If you want to start with the  DynamicProxyBuilder  creating for example  VirtualProxies  bundled with some other things\nyou need the following dependency in your pom.xml:       dependency \n       groupId org.rapidpm.proxybuilder /groupId \n       artifactId rapidpm-proxybuilder-modules-dynamic /artifactId \n       version ${rapidpm.version} /version \n     /dependency   The  ProxyBuilder  includes the  Kotlin  runtime libs and  Metrics  from Dropwizard.   VirtualProxy with one PreAction  This will be a  VirtualProxy  with a  PreAction . You can add as many  PreActions  as you need. \nEvery  PreAction  will be executed before every method invocation in the order the  PreAction  was added.  public class ProxyDemoV001 {\n\n  public static void main(String[] args) {\n\n    final Service service = DynamicProxyBuilder\n        .createBuilder(Service.class, new ServiceImpl())\n        .addIPreAction((original, method, args1) \n                        -  System.out.println(  PreAction =   + System.nanoTime()))\n        .build();\n\n    System.out.println( proxy created   + System.nanoTime());\n    System.out.println( s =   + service.doWork( Go.. ));\n  }\n\n  public interface Service {\n    String doWork(String str);\n  }\n\n  public static class ServiceImpl implements Service {\n    public ServiceImpl() {\n      System.out.println(  ServiceImpl =  constructor...   + System.nanoTime());\n    }\n\n    @Override\n    public String doWork(final String str) {\n      return str +   orig.. ;\n    }\n  }\n\n}  VirtualProxy with Metrics  public class ProxyDemoV002 {\n\n  public static void main(String[] args) {\n    RapidPMMetricsRegistry.getInstance().startConsoleReporter();\n\n    final Service service = DynamicProxyBuilder\n        .createBuilder(Service.class, new ServiceImpl())\n        .addMetrics()\n        .build();\n\n    System.out.println( proxy created   + System.nanoTime());\n    final long count = IntStream.range(0, 10_000_000)\n        .boxed()\n        .map(i -  service.doWork( Go..  + i))\n        .count();\n    System.out.println( s =   + service.doWork( Go.. ));\n    System.out.println( count =   + count);\n  }\n\n\n  public interface Service {\n    String doWork(String str);\n  }\n\n  public static class ServiceImpl implements Service {\n    public ServiceImpl() {\n      System.out.println(  ServiceImpl =  constructor...   + System.nanoTime());\n    }\n    @Override\n    public String doWork(final String str) {\n      return str +   orig.. ;\n    }\n  }\n}  To bootstrap your project with the latest SNAPSHOT you need to add the SNAPSHOT-repository that is available at maven - central. \nHere our  TeamCity  will push regularly the binaries. \nIf you are using maven you could add the following to your  settings.xml  to get the snapshots that are available at maven-central.       profile \n       id allow-snapshots /id \n       activation \n         activeByDefault true /activeByDefault \n       /activation \n       repositories \n         repository \n           id snapshots-repo /id \n           url https://oss.sonatype.org/content/repositories/snapshots /url \n           releases \n             enabled false /enabled \n           /releases \n           snapshots \n             enabled true /enabled \n             updatePolicy always /updatePolicy \n           /snapshots \n         /repository \n       /repositories \n     /profile", 
            "title": "How to bootstrap your project?"
        }, 
        {
            "location": "/dynamicproxy/", 
            "text": "DynamicProxy\n\n\nSince jdk1.3 the DynamicProxy is part of the JDK. \nThe official documentation/API-Doc for JDK8 you can find \n\nhere\n\n\nTo create Proxies based on the DynamicProxy you have to add the following dependency to your project.\n'''xml\n \n\n      \norg.rapidpm.proxybuilder\n\n      \nrapidpm-proxybuilder-modules-dynamic\n\n      \n${rapidpm.version}\n\n    \n\n'''\n\n\nIf you are working with this kind of Proxies, you need always an interface. If you don\u00b4t have an interface in your code and you could not create one, you have to use the \nStaticVirtualProxies\n.\n\n\nVirtualProxy\n\n\npure VirtualProxy\n\n\nfinal DemoLogic original = new DemoLogic();\nfinal DemoInterface demoLogic = VirtualProxyBuilder\n        .createBuilder(DemoInterface.class, original)\n        .build();\n\n\n\n\nWith this you can generate at runtime a \nVirtualProxy\n based on the \nDynamicProxy\n. This you can use beginning from Java 1.3 if you need it. (You have to backport the code by yourself, but we would like to add this as legacy module) The Sourcelevel we are using in this project is Java8.\n\n\nSecurity Proxy\n\n\nfinal DemoLogic original = new DemoLogic();\nfinal DemoInterface demoLogic = VirtualProxyBuilder\n        .createBuilder(DemoInterface.class, original)\n        .addSecurityRule(() -\n false)\n        .build();\n\n\n\n\nThis is a SecureVirtalProxy. The SecurityRules are invoked before the VirtualProxy is activated. This means, the real Subject will be created after the first time all SecurityRules are OK. \n\n\nfinal InnerDemoClass original = new InnerDemoClass();\n    final InnerDemoInterface demoLogic = VirtualProxyBuilder\n        .createBuilder(InnerDemoInterface.class, original)\n        .addSecurityRule(() -\n true)\n        .addSecurityRule(() -\n true)\n        .addSecurityRule(() -\n false)\n        .build();\n\n\n\n\nMetrics Proxy\n\n\nIf you need the possibility to get Metrics out of your application, you could create a MetricsProxy. In this example we are creating a pure \nMetricsProxy\n you could do the following:\n\n\n    final InnerDemoInterface demoLogic = VirtualProxyBuilder\n        .createBuilder(InnerDemoInterface.class, new InnerDemoClass())\n        .addMetrics()\n        .build();\n\n\n\n\n\nYou could combine this with a \nVirtualProxy\n to get a \nVirtualMetricsProxy\n:\n\n\n    final Service service = DynamicProxyBuilder\n        .createBuilder(Service.class, ServiceImpl.class, CreationStrategy.SOME_DUPLICATES)\n        .addMetrics()\n        .build();\n\n\n\n\n\nPreAction -- PostAction\n\n\nSometimes you want to have the possibility to do something before or after a Methodinvocation. For this we have the \n\nPreAction\n and \nPostAction\n. The Actions are executed in the order they are added to the Proxy.\n\n\n    final Service service = DynamicProxyBuilder\n        .createBuilder(Service.class, new ServiceImpl())\n        .addIPreAction((original, method, args1) -\n out.println(\n001 = \n + method.getName()))\n        .addIPreAction((original, method, args1) -\n out.println(\n002 = \n + method.getName()))\n        .addIPreAction((original, method, args1) -\n out.println(\n003 = \n + method.getName()))\n        .build();\n\n\n\n\nA \nVirtualProxy\n with \nPreActions\n will lead to the execution of all \nPreActions\n before the real Subject will be created. \n\n\n    final Service service = DynamicProxyBuilder\n        .createBuilder(Service.class, ServiceImpl.class, CreationStrategy.SOME_DUPLICATES)\n        .addIPreAction((original, method, args1) -\n out.println(\n001 = \n + method.getName()))\n        .addIPreAction((original, method, args1) -\n out.println(\n002 = \n + method.getName()))\n        .addIPreAction((original, method, args1) -\n out.println(\n003 = \n + method.getName()))\n        .build();\n\n\n\n\nIf you combine it with a \nSecurityVirtualProxy\n with \nPreActions\n the Security-Rule will be invoked first.\n\n\n    final Service service = DynamicProxyBuilder\n        .createBuilder(Service.class, ServiceImpl.class, CreationStrategy.SOME_DUPLICATES)\n        .addIPreAction((original, method, args1) -\n out.println(\n001 = \n + method.getName()))\n        .addIPreAction((original, method, args1) -\n out.println(\n002 = \n + method.getName()))\n        .addIPreAction((original, method, args1) -\n out.println(\n003 = \n + method.getName()))\n        .addSecurityRule(() -\n {\n          out.println(\nsec 001\n);\n          return true;\n        })\n        .build();\n\n\n\n\nCreationStrategies\n\n\nWith the \nCreationStrategies\n you can choose what will be the right way of synchronization for you if you are using \nVirtualProxies\n. You can implement some other by yourself, if needed. With \nCreationStrategies\n you can do different things. Not only the creation of one Element is possible, you can e.g. create a pool of instances used randomly or you can do something like \nMethodScoped\n. \n\n\nMethodScoped\n\n\nThis \nCreationStrategy\n will create for every method invocation a new instance.\n\n\npublic class ServiceStrategyFactoryMethodScoped\nT\n implements ServiceStrategyFactory\nT\n {\n\n  @Override\n  public synchronized T realSubject(ServiceFactory\nT\n factory) {\n    return factory.createInstance();\n  }\n}\n\n\n\n\nNONE\n\n\nIf you choose nothing or \nCreationStrategy.NONE\n you will get the \nNotThreadSafe\n version.\n\n\npublic class ServiceStrategyFactoryNotThreadSafe\nT\n implements ServiceStrategyFactory\nT\n {\n\n  private T service;\n\n  @Override\n  public T realSubject(ServiceFactory\nT\n factory) {\n    if (service == null) {\n      service = factory.createInstance();\n    }\n    return service;\n  }\n\n}\n\n\n\n\nSomeDuplicates\n\n\npublic class ServiceStrategyFactorySomeDuplicates\nT\n implements ServiceStrategyFactory\nT\n {\n  private final AtomicReference\nT\n ref = new AtomicReference\n();\n\n  @Override\n  public T realSubject(ServiceFactory\nT\n factory) {\n\n    T service = ref.get();\n    if (service == null) {\n      service = factory.createInstance();\n      if (!ref.compareAndSet(null, service)) {\n        service = ref.get();\n      }\n    }\n    return service;\n  }\n}\n\n\n\n\nSynchronized\n\n\npublic class ServiceStrategyFactorySynchronized\nT\n implements ServiceStrategyFactory\nT\n {\n\n  private T service;\n\n  @Override\n  public synchronized T realSubject(ServiceFactory\nT\n factory) {\n    if (service == null) {\n      service = factory.createInstance();\n    }\n    return service;\n  }\n}\n\n\n\n\nNoDuplicates\n\n\npublic class ServiceStrategyFactoryNoDuplicates\nT\n implements ServiceStrategyFactory\nT\n {\n\n  private final Lock initializationLock = new ReentrantLock();\n  private volatile T realSubject;\n\n  @Override\n  public T realSubject(ServiceFactory\nT\n factory) {\n    T result = realSubject;\n    if (result == null) {\n      initializationLock.lock();\n      try {\n        result = realSubject;\n        if (result == null) {\n          result = realSubject = factory.createInstance();\n        }\n      } finally {\n        initializationLock.unlock();\n      }\n    }\n    return result;\n  }\n}", 
            "title": "DynamicProxy"
        }, 
        {
            "location": "/dynamicproxy/#dynamicproxy", 
            "text": "Since jdk1.3 the DynamicProxy is part of the JDK. \nThe official documentation/API-Doc for JDK8 you can find  here  To create Proxies based on the DynamicProxy you have to add the following dependency to your project.\n'''xml\n  \n       org.rapidpm.proxybuilder \n       rapidpm-proxybuilder-modules-dynamic \n       ${rapidpm.version} \n     \n'''  If you are working with this kind of Proxies, you need always an interface. If you don\u00b4t have an interface in your code and you could not create one, you have to use the  StaticVirtualProxies .", 
            "title": "DynamicProxy"
        }, 
        {
            "location": "/dynamicproxy/#virtualproxy", 
            "text": "pure VirtualProxy  final DemoLogic original = new DemoLogic();\nfinal DemoInterface demoLogic = VirtualProxyBuilder\n        .createBuilder(DemoInterface.class, original)\n        .build();  With this you can generate at runtime a  VirtualProxy  based on the  DynamicProxy . This you can use beginning from Java 1.3 if you need it. (You have to backport the code by yourself, but we would like to add this as legacy module) The Sourcelevel we are using in this project is Java8.  Security Proxy  final DemoLogic original = new DemoLogic();\nfinal DemoInterface demoLogic = VirtualProxyBuilder\n        .createBuilder(DemoInterface.class, original)\n        .addSecurityRule(() -  false)\n        .build();  This is a SecureVirtalProxy. The SecurityRules are invoked before the VirtualProxy is activated. This means, the real Subject will be created after the first time all SecurityRules are OK.   final InnerDemoClass original = new InnerDemoClass();\n    final InnerDemoInterface demoLogic = VirtualProxyBuilder\n        .createBuilder(InnerDemoInterface.class, original)\n        .addSecurityRule(() -  true)\n        .addSecurityRule(() -  true)\n        .addSecurityRule(() -  false)\n        .build();  Metrics Proxy  If you need the possibility to get Metrics out of your application, you could create a MetricsProxy. In this example we are creating a pure  MetricsProxy  you could do the following:      final InnerDemoInterface demoLogic = VirtualProxyBuilder\n        .createBuilder(InnerDemoInterface.class, new InnerDemoClass())\n        .addMetrics()\n        .build();  You could combine this with a  VirtualProxy  to get a  VirtualMetricsProxy :      final Service service = DynamicProxyBuilder\n        .createBuilder(Service.class, ServiceImpl.class, CreationStrategy.SOME_DUPLICATES)\n        .addMetrics()\n        .build();", 
            "title": "VirtualProxy"
        }, 
        {
            "location": "/dynamicproxy/#preaction-postaction", 
            "text": "Sometimes you want to have the possibility to do something before or after a Methodinvocation. For this we have the  PreAction  and  PostAction . The Actions are executed in the order they are added to the Proxy.      final Service service = DynamicProxyBuilder\n        .createBuilder(Service.class, new ServiceImpl())\n        .addIPreAction((original, method, args1) -  out.println( 001 =   + method.getName()))\n        .addIPreAction((original, method, args1) -  out.println( 002 =   + method.getName()))\n        .addIPreAction((original, method, args1) -  out.println( 003 =   + method.getName()))\n        .build();  A  VirtualProxy  with  PreActions  will lead to the execution of all  PreActions  before the real Subject will be created.       final Service service = DynamicProxyBuilder\n        .createBuilder(Service.class, ServiceImpl.class, CreationStrategy.SOME_DUPLICATES)\n        .addIPreAction((original, method, args1) -  out.println( 001 =   + method.getName()))\n        .addIPreAction((original, method, args1) -  out.println( 002 =   + method.getName()))\n        .addIPreAction((original, method, args1) -  out.println( 003 =   + method.getName()))\n        .build();  If you combine it with a  SecurityVirtualProxy  with  PreActions  the Security-Rule will be invoked first.      final Service service = DynamicProxyBuilder\n        .createBuilder(Service.class, ServiceImpl.class, CreationStrategy.SOME_DUPLICATES)\n        .addIPreAction((original, method, args1) -  out.println( 001 =   + method.getName()))\n        .addIPreAction((original, method, args1) -  out.println( 002 =   + method.getName()))\n        .addIPreAction((original, method, args1) -  out.println( 003 =   + method.getName()))\n        .addSecurityRule(() -  {\n          out.println( sec 001 );\n          return true;\n        })\n        .build();", 
            "title": "PreAction -- PostAction"
        }, 
        {
            "location": "/dynamicproxy/#creationstrategies", 
            "text": "With the  CreationStrategies  you can choose what will be the right way of synchronization for you if you are using  VirtualProxies . You can implement some other by yourself, if needed. With  CreationStrategies  you can do different things. Not only the creation of one Element is possible, you can e.g. create a pool of instances used randomly or you can do something like  MethodScoped .   MethodScoped  This  CreationStrategy  will create for every method invocation a new instance.  public class ServiceStrategyFactoryMethodScoped T  implements ServiceStrategyFactory T  {\n\n  @Override\n  public synchronized T realSubject(ServiceFactory T  factory) {\n    return factory.createInstance();\n  }\n}  NONE  If you choose nothing or  CreationStrategy.NONE  you will get the  NotThreadSafe  version.  public class ServiceStrategyFactoryNotThreadSafe T  implements ServiceStrategyFactory T  {\n\n  private T service;\n\n  @Override\n  public T realSubject(ServiceFactory T  factory) {\n    if (service == null) {\n      service = factory.createInstance();\n    }\n    return service;\n  }\n\n}  SomeDuplicates  public class ServiceStrategyFactorySomeDuplicates T  implements ServiceStrategyFactory T  {\n  private final AtomicReference T  ref = new AtomicReference ();\n\n  @Override\n  public T realSubject(ServiceFactory T  factory) {\n\n    T service = ref.get();\n    if (service == null) {\n      service = factory.createInstance();\n      if (!ref.compareAndSet(null, service)) {\n        service = ref.get();\n      }\n    }\n    return service;\n  }\n}  Synchronized  public class ServiceStrategyFactorySynchronized T  implements ServiceStrategyFactory T  {\n\n  private T service;\n\n  @Override\n  public synchronized T realSubject(ServiceFactory T  factory) {\n    if (service == null) {\n      service = factory.createInstance();\n    }\n    return service;\n  }\n}  NoDuplicates  public class ServiceStrategyFactoryNoDuplicates T  implements ServiceStrategyFactory T  {\n\n  private final Lock initializationLock = new ReentrantLock();\n  private volatile T realSubject;\n\n  @Override\n  public T realSubject(ServiceFactory T  factory) {\n    T result = realSubject;\n    if (result == null) {\n      initializationLock.lock();\n      try {\n        result = realSubject;\n        if (result == null) {\n          result = realSubject = factory.createInstance();\n        }\n      } finally {\n        initializationLock.unlock();\n      }\n    }\n    return result;\n  }\n}", 
            "title": "CreationStrategies"
        }, 
        {
            "location": "/objectadapter/", 
            "text": "Object Adapter\n\n\nIn this section we want to describe the ObjectAdapter Pattern that is realized in this module.\nWe can use a dynamic and a static version of the \nObjectAdapter\n Pattern. The dynamic version is based on the DynamicProxy from jdk1.3 and the static version is purely generated via Annotation Processing. \n\n\nDynamicObjectAdapter\n\n\nIf you want to use the \nDynamicObjectAdapter\n you need at leaset one Interface you can cast to. To create the \nDynamicObjectAdapter\n you can use the Annotation \n@DynamicObjectAdapterBuilder\n. This will create via Annotation Processing the \nDynamicObjectAdapter\n and the corresponding \nBuilder\n that you can use for convenience and type safety. Let\u00b4s assume you have the following interface \nService\n:\n\n\n@DynamicObjectAdapterBuilder\npublic interface Service {\n  String doWork(String txt);\n  String doMoreWorkA(String txt);\n  String doMoreWorkB(String txt);\n  String doMoreWorkC(String txt);\n  String doMoreWorkD(String txt);\n}\n\n\n\n\nWith the Annotation we are generating the corresponding parts, used for the typesafe generated DynamicObjectAdapterBuilder.\nYou will get a FunctionalInterface for every Method declared in your interface, and an typed InvocationHandler and the Builder itself. \n\n\nTo use the \nDynamicObjectAdapter\n you can do the following:\n\n\n    final Service service = ServiceAdapterBuilder\n        .newBuilder()\n        .setOriginal(new ServiceImpl())\n        .withDoWork(new ServiceMethodDoWork() {\n          @Override\n          public String doWork(final String txt) {\n            return \nmocked\n;\n          }\n        })\n        .withDoMoreWorkC(new ServiceMethodDoMoreWorkC() {\n          @Override\n          public String doMoreWorkC(final String txt) {\n            return \nmocked again\n;\n          }\n        })\n        .buildForTarget(Service.class);\n\n\n\n\n\nAlso you can use the Lambda-Expressions for this. So your code will be shorter.\n\n\n    final Service serviceJDK8 = ServiceAdapterBuilder\n        .newBuilder()\n        .setOriginal(new ServiceImpl())\n        .withDoWork(txt -\n \nmocked\n)\n        .withDoMoreWorkC(txt -\n \nmocked again\n)\n        .buildForTarget(Service.class);\n\n\n\n\nYou can use this for mocking too, if you want. For this you could adapt the methods you need and set the original to null.\n\n\n    final Service serviceJDK8Mock = ServiceAdapterBuilder\n        .newBuilder()\n        .setOriginal(null)\n        .withDoWork(txt -\n \nmocked\n)\n        .withDoMoreWorkC(txt -\n \nmocked again\n)\n        .buildForTarget(Service.class);\n\n\n\n\nIf you can not use AnnotationProcessing, you are able to use the DynamicObjectAdapter itself.  \n\n\n    final ExtendedInvocationHandler\nService\n extendedInvocationHandler\n        = new ExtendedInvocationHandler\nService\n() { };\n\n    extendedInvocationHandler.addAdapter(new Object() {\n      public String doMoreWorkB(String txt) {\n        return \nmocked\n;\n      }\n    });\n\n    final AdapterBuilder\nService\n adapterBuilder = new AdapterBuilder\nService\n() {\n      @Override\n      protected ExtendedInvocationHandler\nService\n getInvocationHandler() {\n        return extendedInvocationHandler;\n      }\n    };\n\n    final Service service = adapterBuilder.buildForTarget(Service.class);\n\n\n\n\nOr if you want to write it even more compact..\n\n\nfinal Service service = new AdapterBuilder\nService\n() {\n      protected ExtendedInvocationHandler\nService\n getInvocationHandler() {\n        return new ExtendedInvocationHandler\nService\n() {\n          {\n            addAdapter(new Object() {\n              public String doMoreWorkB(String txt) {\n                return \nmocked\n;\n              }\n            });\n          }\n        };\n      }\n    }\n    .buildForTarget(Service.class);\n\n\n\n\nStaticObjectAdapter\n\n\nIf you want, you can use the static ObjectAdapter nearly in the same way. But here you will get no Builder. You only will get the functional interfaces and the Adapter itself. Add the Annotation \n@StaticObjectAdapter\n to an Interface or Class.\n\n\n@StaticObjectAdapter\npublic interface Service {\n  String doWork(String txt);\n  String doMoreWorkA(String txt);\n  String doMoreWorkB(String txt);\n  String doMoreWorkC(String txt);\n  String doMoreWorkD(String txt);\n}\n\n\n\n\nAfter a \nmvn clean compile\n you will get the Functionalinterfaces and the StaticObjectAdapter itself.\n\n\nfinal Service service = new ServiceStaticObjectAdapter()\n        .withService(new ServiceImpl())\n        .withServiceMethodDoMoreWorkC(new ServiceMethodDoMoreWorkC() {\n          @Override\n          public String doMoreWorkC(final String txt) {\n            return \nmocked\n;\n          }\n        })\n        .withServiceMethodDoMoreWorkD(new ServiceMethodDoMoreWorkD() {\n          @Override\n          public String doMoreWorkD(final String txt) {\n            return \nmocked\n;\n          }\n        });\n\n\n\n\n\nAnd here again, you can write it with short Lambda-syntax:\n\n\nfinal Service service = new ServiceStaticObjectAdapter()\n        .withService(new ServiceImpl())\n        .withServiceMethodDoMoreWorkC(txt -\n \nmocked\n)\n        .withServiceMethodDoMoreWorkD(txt -\n \nmocked\n);", 
            "title": "ObjectAdapter"
        }, 
        {
            "location": "/objectadapter/#object-adapter", 
            "text": "In this section we want to describe the ObjectAdapter Pattern that is realized in this module.\nWe can use a dynamic and a static version of the  ObjectAdapter  Pattern. The dynamic version is based on the DynamicProxy from jdk1.3 and the static version is purely generated via Annotation Processing.", 
            "title": "Object Adapter"
        }, 
        {
            "location": "/objectadapter/#dynamicobjectadapter", 
            "text": "If you want to use the  DynamicObjectAdapter  you need at leaset one Interface you can cast to. To create the  DynamicObjectAdapter  you can use the Annotation  @DynamicObjectAdapterBuilder . This will create via Annotation Processing the  DynamicObjectAdapter  and the corresponding  Builder  that you can use for convenience and type safety. Let\u00b4s assume you have the following interface  Service :  @DynamicObjectAdapterBuilder\npublic interface Service {\n  String doWork(String txt);\n  String doMoreWorkA(String txt);\n  String doMoreWorkB(String txt);\n  String doMoreWorkC(String txt);\n  String doMoreWorkD(String txt);\n}  With the Annotation we are generating the corresponding parts, used for the typesafe generated DynamicObjectAdapterBuilder.\nYou will get a FunctionalInterface for every Method declared in your interface, and an typed InvocationHandler and the Builder itself.   To use the  DynamicObjectAdapter  you can do the following:      final Service service = ServiceAdapterBuilder\n        .newBuilder()\n        .setOriginal(new ServiceImpl())\n        .withDoWork(new ServiceMethodDoWork() {\n          @Override\n          public String doWork(final String txt) {\n            return  mocked ;\n          }\n        })\n        .withDoMoreWorkC(new ServiceMethodDoMoreWorkC() {\n          @Override\n          public String doMoreWorkC(final String txt) {\n            return  mocked again ;\n          }\n        })\n        .buildForTarget(Service.class);  Also you can use the Lambda-Expressions for this. So your code will be shorter.      final Service serviceJDK8 = ServiceAdapterBuilder\n        .newBuilder()\n        .setOriginal(new ServiceImpl())\n        .withDoWork(txt -   mocked )\n        .withDoMoreWorkC(txt -   mocked again )\n        .buildForTarget(Service.class);  You can use this for mocking too, if you want. For this you could adapt the methods you need and set the original to null.      final Service serviceJDK8Mock = ServiceAdapterBuilder\n        .newBuilder()\n        .setOriginal(null)\n        .withDoWork(txt -   mocked )\n        .withDoMoreWorkC(txt -   mocked again )\n        .buildForTarget(Service.class);  If you can not use AnnotationProcessing, you are able to use the DynamicObjectAdapter itself.        final ExtendedInvocationHandler Service  extendedInvocationHandler\n        = new ExtendedInvocationHandler Service () { };\n\n    extendedInvocationHandler.addAdapter(new Object() {\n      public String doMoreWorkB(String txt) {\n        return  mocked ;\n      }\n    });\n\n    final AdapterBuilder Service  adapterBuilder = new AdapterBuilder Service () {\n      @Override\n      protected ExtendedInvocationHandler Service  getInvocationHandler() {\n        return extendedInvocationHandler;\n      }\n    };\n\n    final Service service = adapterBuilder.buildForTarget(Service.class);  Or if you want to write it even more compact..  final Service service = new AdapterBuilder Service () {\n      protected ExtendedInvocationHandler Service  getInvocationHandler() {\n        return new ExtendedInvocationHandler Service () {\n          {\n            addAdapter(new Object() {\n              public String doMoreWorkB(String txt) {\n                return  mocked ;\n              }\n            });\n          }\n        };\n      }\n    }\n    .buildForTarget(Service.class);", 
            "title": "DynamicObjectAdapter"
        }, 
        {
            "location": "/objectadapter/#staticobjectadapter", 
            "text": "If you want, you can use the static ObjectAdapter nearly in the same way. But here you will get no Builder. You only will get the functional interfaces and the Adapter itself. Add the Annotation  @StaticObjectAdapter  to an Interface or Class.  @StaticObjectAdapter\npublic interface Service {\n  String doWork(String txt);\n  String doMoreWorkA(String txt);\n  String doMoreWorkB(String txt);\n  String doMoreWorkC(String txt);\n  String doMoreWorkD(String txt);\n}  After a  mvn clean compile  you will get the Functionalinterfaces and the StaticObjectAdapter itself.  final Service service = new ServiceStaticObjectAdapter()\n        .withService(new ServiceImpl())\n        .withServiceMethodDoMoreWorkC(new ServiceMethodDoMoreWorkC() {\n          @Override\n          public String doMoreWorkC(final String txt) {\n            return  mocked ;\n          }\n        })\n        .withServiceMethodDoMoreWorkD(new ServiceMethodDoMoreWorkD() {\n          @Override\n          public String doMoreWorkD(final String txt) {\n            return  mocked ;\n          }\n        });  And here again, you can write it with short Lambda-syntax:  final Service service = new ServiceStaticObjectAdapter()\n        .withService(new ServiceImpl())\n        .withServiceMethodDoMoreWorkC(txt -   mocked )\n        .withServiceMethodDoMoreWorkD(txt -   mocked );", 
            "title": "StaticObjectAdapter"
        }, 
        {
            "location": "/staticproxy/", 
            "text": "Static Proxies\n\n\nCompared to the DynamicProxies we are now generating static proxies. This could be done with \n\nAnnotationProcessing\n during the compile process or at runtime.\n\n\nGenerated\n\n\nUsing \nAnnotationProcessing\n to generate the Proxies will give you the possibility to get \nproxies without the overhead of Reflection. On the other side you will generate maybe a lot of code, that must be compiled.\n\n\nRuntime Generated\n\n\nCompared to the way of using \nAnnotationProcessing\n this one will create and compile at runtime the static proxies. This\nis possible if you have access to the Compiler (tools.jar) during runtime and will mostly lead you to use Unsafe to put your new classes to the SystemClassLoader.\n\n\nStatic Generated VirtualProxy\n\n\nWith the Annotation \n@StaticVirtualProxy\n you can generate Static - VirtualProxies during the clean compile process. This Annotation have a parameter called \nstrategy\n. The Strategy is used to define the right time to call the \nInstanceFactory\n\nSee \nDynamicProxies - CreationStrategies\n\n\nStatic Generated MetricsProxy\n\n\nWith the static \nMetricsProxy\n we will get generated MetricsProxies that are using Dropwizard-Metrics to measure the \nusage of the methods. The generated static MetricsProxies are generating Methods for all declared Methods in the inheritance including \nhashCode()\n and \nequals()\n. You can use the Annotation  \n@StaticMetricsProxy\n in combination with interfaces and classes.\n\n\nThere is one difference between the generated classes based on interfaces and classes. If you annotate an interface you will only get Metrics for the declared Methods, not for \nhashCode\n and \nequals\n if it is not explicitly declared. But for annotated classes you will get the Metrics for methods from Object, too.\n\n\n@StaticMetricsProxy\npublic interface Service {\n  String doWork(String txt);\n\n  String doMoreWorkA(String txt);\n\n  String doMoreWorkB(String txt);\n\n  String doMoreWorkC(String txt);\n\n  String doMoreWorkD(String txt);\n}\n\n\n\n\nYou can use the MetricsProxy easily by creating an instance and setting the Delegator. After this\nevery Methodcall will be counted by DropwizardMetrics. For every Method, you will get a separate Histogram, named with the full Classname and Methodname. In my case you will get a Histogram with the name\n\norg.rapidpm.demo.proxybuilder.staticproxy.v002.Service.doMoreWorkC\n\n\n    final ServiceStaticMetricsProxy proxy = new ServiceStaticMetricsProxy();\n    proxy.withDelegator(new ServiceImpl());\n\n    final Service service = proxy;\n\n    RapidPMMetricsRegistry.getInstance().startConsoleReporter();\n    try (final IntStream intStream = IntStream.range(0, 10_000_000)) {\n      intStream\n          .onClose(() -\n out.println(\nStream will be closed now...\n))\n\n          .forEach(i -\n service.doMoreWorkC(\naaahhhhhh \n + i));\n    }\n\n    RapidPMMetricsRegistry\n        .getInstance()\n        .getMetrics()\n        .getHistograms()\n        .forEach((s, histogram) -\n {\n          out.println(\ns = \n + s);\n          out.println(\nhistogram - get999thPercentile= \n + histogram.getSnapshot().get999thPercentile());\n        });\n\n\n\n\nStatic Generated LoggingProxy\n\n\nQuite often I could find source code like the following.\n\n\npublic void doWork(String str){\n    logger.debug(\ndoWork -\n \n + str);\n    //some work....\n}\n\n\n\n\nThe target is a logging of the methodcalls and the values. OK, we don\u00b4t want to discuss why or why not. But if you have to do it, you could\nnow use the \nLoggingProxy\n. The Logging is implemented with \nslf4j\n. Every method call will be logged with \nthe methodname, the name of the params and the param values itself. With this information you could find the corresponding source code very easy.\n\n\nBased on the following definition of a method...\n\n\n    public \nT extends List\n T unwrapList(final T type, final String str);\n\n\n\n\nyou will get an implementation like the follwoing.\n\n\n  public \nT extends List\n T unwrapList(final T type, final String str) {\n    if (logger.isInfoEnabled()) {\n      logger.info(\ndelegator.unwrapList(type, str) values - \n + type + \n - \n + str);\n    }\n    T result = delegator.unwrapList(type, str);\n    return result;\n  }\n\n\n\n\nThis implementation will asume, that the values are using a proper \ntoString()\n implementation itself.\n\n\nIf you want to generate a StaticLoggingProxy, please add the Annotation \n@StaticLoggingProxy\n to the target class or interface.\n\n\nHere you will get the full example.\n\n\n@StaticLoggingProxy\npublic interface MyLoggingInterface {\n  \nT extends List\n T unwrapList(T type, String str);\n}\n\n//generated code\n@Generated(\n    value = \nStaticLoggingProxyAnnotationProcessor\n,\n    date = \n2016-05-09T14:40:56.22\n,\n    comments = \nwww.proxybuilder.org\n\n)\n@IsGeneratedProxy\n@IsLoggingProxy\npublic class MyLoggingInterfaceStaticLoggingProxy implements MyLoggingInterface {\n  private static final Logger logger = getLogger(MyLoggingInterface.class);\n\n  private MyLoggingInterface delegator;\n\n  public MyLoggingInterfaceStaticLoggingProxy withDelegator(final MyLoggingInterface delegator) {\n    this.delegator = delegator;\n    return this;\n  }\n\n  public \nT extends List\n T unwrapList(final T type, final String str) {\n    if(logger.isInfoEnabled()) {\n      logger.info(\ndelegator.unwrapList(type, str) values - \n + type + \n - \n + str);\n    }\n    T result = delegator.unwrapList(type, str);\n    return result;\n  }\n}\n\n// demo code usage\npublic class MainV008 {\n  public static void main(String[] args) {\n    final MyLoggingInterface demo\n        = new MyLoggingInterfaceStaticLoggingProxy()\n        .withDelegator(new LoggerExample());\n    final List\nInteger\n list = demo.unwrapList(asList(1,2,3,4), \nAEAEA\n);\n  }\n\n  public static class LoggerExample implements MyLoggingInterface {\n    @Override\n    public \nT extends List\n T unwrapList(final T type, final String str) {\n      return null;\n    }\n  }\n}\n\n\n\n\nThe logging output will be \ndelegator.unwrapList(type, str) values - [1, 2, 3, 4] - AEAEA\n\n\nStatic Runtime VirtualProxy\n\n\npartly implemented until now.. stay tuned\n\n\nStatic Runtime MetricsProxy\n\n\npartly implemented until now.. stay tuned", 
            "title": "StaticProxy"
        }, 
        {
            "location": "/staticproxy/#static-proxies", 
            "text": "Compared to the DynamicProxies we are now generating static proxies. This could be done with  AnnotationProcessing  during the compile process or at runtime.", 
            "title": "Static Proxies"
        }, 
        {
            "location": "/staticproxy/#generated", 
            "text": "Using  AnnotationProcessing  to generate the Proxies will give you the possibility to get \nproxies without the overhead of Reflection. On the other side you will generate maybe a lot of code, that must be compiled.", 
            "title": "Generated"
        }, 
        {
            "location": "/staticproxy/#runtime-generated", 
            "text": "Compared to the way of using  AnnotationProcessing  this one will create and compile at runtime the static proxies. This\nis possible if you have access to the Compiler (tools.jar) during runtime and will mostly lead you to use Unsafe to put your new classes to the SystemClassLoader.", 
            "title": "Runtime Generated"
        }, 
        {
            "location": "/staticproxy/#static-generated-virtualproxy", 
            "text": "With the Annotation  @StaticVirtualProxy  you can generate Static - VirtualProxies during the clean compile process. This Annotation have a parameter called  strategy . The Strategy is used to define the right time to call the  InstanceFactory \nSee  DynamicProxies - CreationStrategies", 
            "title": "Static Generated VirtualProxy"
        }, 
        {
            "location": "/staticproxy/#static-generated-metricsproxy", 
            "text": "With the static  MetricsProxy  we will get generated MetricsProxies that are using Dropwizard-Metrics to measure the \nusage of the methods. The generated static MetricsProxies are generating Methods for all declared Methods in the inheritance including  hashCode()  and  equals() . You can use the Annotation   @StaticMetricsProxy  in combination with interfaces and classes.  There is one difference between the generated classes based on interfaces and classes. If you annotate an interface you will only get Metrics for the declared Methods, not for  hashCode  and  equals  if it is not explicitly declared. But for annotated classes you will get the Metrics for methods from Object, too.  @StaticMetricsProxy\npublic interface Service {\n  String doWork(String txt);\n\n  String doMoreWorkA(String txt);\n\n  String doMoreWorkB(String txt);\n\n  String doMoreWorkC(String txt);\n\n  String doMoreWorkD(String txt);\n}  You can use the MetricsProxy easily by creating an instance and setting the Delegator. After this\nevery Methodcall will be counted by DropwizardMetrics. For every Method, you will get a separate Histogram, named with the full Classname and Methodname. In my case you will get a Histogram with the name org.rapidpm.demo.proxybuilder.staticproxy.v002.Service.doMoreWorkC      final ServiceStaticMetricsProxy proxy = new ServiceStaticMetricsProxy();\n    proxy.withDelegator(new ServiceImpl());\n\n    final Service service = proxy;\n\n    RapidPMMetricsRegistry.getInstance().startConsoleReporter();\n    try (final IntStream intStream = IntStream.range(0, 10_000_000)) {\n      intStream\n          .onClose(() -  out.println( Stream will be closed now... ))\n\n          .forEach(i -  service.doMoreWorkC( aaahhhhhh   + i));\n    }\n\n    RapidPMMetricsRegistry\n        .getInstance()\n        .getMetrics()\n        .getHistograms()\n        .forEach((s, histogram) -  {\n          out.println( s =   + s);\n          out.println( histogram - get999thPercentile=   + histogram.getSnapshot().get999thPercentile());\n        });", 
            "title": "Static Generated MetricsProxy"
        }, 
        {
            "location": "/staticproxy/#static-generated-loggingproxy", 
            "text": "Quite often I could find source code like the following.  public void doWork(String str){\n    logger.debug( doWork -    + str);\n    //some work....\n}  The target is a logging of the methodcalls and the values. OK, we don\u00b4t want to discuss why or why not. But if you have to do it, you could\nnow use the  LoggingProxy . The Logging is implemented with  slf4j . Every method call will be logged with \nthe methodname, the name of the params and the param values itself. With this information you could find the corresponding source code very easy.  Based on the following definition of a method...      public  T extends List  T unwrapList(final T type, final String str);  you will get an implementation like the follwoing.    public  T extends List  T unwrapList(final T type, final String str) {\n    if (logger.isInfoEnabled()) {\n      logger.info( delegator.unwrapList(type, str) values -   + type +   -   + str);\n    }\n    T result = delegator.unwrapList(type, str);\n    return result;\n  }  This implementation will asume, that the values are using a proper  toString()  implementation itself.  If you want to generate a StaticLoggingProxy, please add the Annotation  @StaticLoggingProxy  to the target class or interface.  Here you will get the full example.  @StaticLoggingProxy\npublic interface MyLoggingInterface {\n   T extends List  T unwrapList(T type, String str);\n}\n\n//generated code\n@Generated(\n    value =  StaticLoggingProxyAnnotationProcessor ,\n    date =  2016-05-09T14:40:56.22 ,\n    comments =  www.proxybuilder.org \n)\n@IsGeneratedProxy\n@IsLoggingProxy\npublic class MyLoggingInterfaceStaticLoggingProxy implements MyLoggingInterface {\n  private static final Logger logger = getLogger(MyLoggingInterface.class);\n\n  private MyLoggingInterface delegator;\n\n  public MyLoggingInterfaceStaticLoggingProxy withDelegator(final MyLoggingInterface delegator) {\n    this.delegator = delegator;\n    return this;\n  }\n\n  public  T extends List  T unwrapList(final T type, final String str) {\n    if(logger.isInfoEnabled()) {\n      logger.info( delegator.unwrapList(type, str) values -   + type +   -   + str);\n    }\n    T result = delegator.unwrapList(type, str);\n    return result;\n  }\n}\n\n// demo code usage\npublic class MainV008 {\n  public static void main(String[] args) {\n    final MyLoggingInterface demo\n        = new MyLoggingInterfaceStaticLoggingProxy()\n        .withDelegator(new LoggerExample());\n    final List Integer  list = demo.unwrapList(asList(1,2,3,4),  AEAEA );\n  }\n\n  public static class LoggerExample implements MyLoggingInterface {\n    @Override\n    public  T extends List  T unwrapList(final T type, final String str) {\n      return null;\n    }\n  }\n}  The logging output will be  delegator.unwrapList(type, str) values - [1, 2, 3, 4] - AEAEA", 
            "title": "Static Generated LoggingProxy"
        }, 
        {
            "location": "/staticproxy/#static-runtime-virtualproxy", 
            "text": "partly implemented until now.. stay tuned", 
            "title": "Static Runtime VirtualProxy"
        }, 
        {
            "location": "/staticproxy/#static-runtime-metricsproxy", 
            "text": "partly implemented until now.. stay tuned", 
            "title": "Static Runtime MetricsProxy"
        }, 
        {
            "location": "/projectinfos/", 
            "text": "Project - Informations\n\n\nThis project is sponsored with OpenSource Licences from \n\n\n\n\n\n\nTeamCity\n\n\nYou can login as \nguest\n at \nTeamCity\n to see all build configurations and the actual\nstate of \ndevelop-\n and \nmaster-\nbranch.\n\n\nSonarCube\n\n\nFor the coverage and other metrics we are using our \nSonarCube\n installation. Feel free to check it.\n\n\nVersionEye\n\n\nWe are checking all dependencies with VersionEye. We try to use the latest versions \nfor all parts of the project.\n\n\nmaster:\n\n\ndevelop:\n\n\n\nUpsource\n\n\nIf you want to browse the code, feel free to try our \nUpsource\n.\nWe are using this for Team - Code-Reviews too. If you have any questions about the code, mark the part you are interested in and send this link to us with your questions.\n\n\n \n\n\n\n \n \nUpsource - RapidPM - ProxyBuilder\n \n sponsored by from \nMacros reply GmbH\n \n\n\nYoutrack\n\n\nFor the version planning and bugtracking we are using \n \n \nYoutrack - RapidPM - ProxyBuilder\n \n \n\n\n \n\n\n\nProject structure\n\n\nThe project-target is a Builder-Framework for creating different types of proxies. \nYou will find three main groups of proxies.\n\n\n\n\nDynamicProxies\n\n\nObjectAdapter\n\n\nStaticProxies", 
            "title": "Projectinfos"
        }, 
        {
            "location": "/projectinfos/#project-informations", 
            "text": "This project is sponsored with OpenSource Licences from", 
            "title": "Project - Informations"
        }, 
        {
            "location": "/projectinfos/#teamcity", 
            "text": "You can login as  guest  at  TeamCity  to see all build configurations and the actual\nstate of  develop-  and  master- branch.", 
            "title": "TeamCity"
        }, 
        {
            "location": "/projectinfos/#sonarcube", 
            "text": "For the coverage and other metrics we are using our  SonarCube  installation. Feel free to check it.", 
            "title": "SonarCube"
        }, 
        {
            "location": "/projectinfos/#versioneye", 
            "text": "We are checking all dependencies with VersionEye. We try to use the latest versions \nfor all parts of the project.  master: \ndevelop:", 
            "title": "VersionEye"
        }, 
        {
            "location": "/projectinfos/#upsource", 
            "text": "If you want to browse the code, feel free to try our  Upsource .\nWe are using this for Team - Code-Reviews too. If you have any questions about the code, mark the part you are interested in and send this link to us with your questions.         Upsource - RapidPM - ProxyBuilder    sponsored by from  Macros reply GmbH", 
            "title": "Upsource"
        }, 
        {
            "location": "/projectinfos/#youtrack", 
            "text": "For the version planning and bugtracking we are using      Youtrack - RapidPM - ProxyBuilder", 
            "title": "Youtrack"
        }, 
        {
            "location": "/projectinfos/#project-structure", 
            "text": "The project-target is a Builder-Framework for creating different types of proxies. \nYou will find three main groups of proxies.   DynamicProxies  ObjectAdapter  StaticProxies", 
            "title": "Project structure"
        }, 
        {
            "location": "/additionalinfos/", 
            "text": "Additional Infos\n\n\nIf you want to have an overview of the Proxy-Pattern itself I can recommend\nthe following sources.\n\n\nJava One 2015\n\n\n \n\n\n\n \n \nJavaOne 2015 Tutorial - Proxy DeepDive\n \n from \nSven Ruppert\n \n\n\n\n\n(soon) a free gitbook about Pattern and more \nJava Fundamentals in english\n\n\n\n\nDynamic Proxies\n\n\nThe book \nDynamic Proxies\n from \nDr. Heinz Kabutz\n and \nSven Ruppert\n\n\nJava Fundamentals\n\n\nA free german gitbook about Pattern and more \nJava Fundamentals", 
            "title": "Additional Infos"
        }, 
        {
            "location": "/additionalinfos/#additional-infos", 
            "text": "If you want to have an overview of the Proxy-Pattern itself I can recommend\nthe following sources.", 
            "title": "Additional Infos"
        }, 
        {
            "location": "/additionalinfos/#java-one-2015", 
            "text": "JavaOne 2015 Tutorial - Proxy DeepDive    from  Sven Ruppert     (soon) a free gitbook about Pattern and more  Java Fundamentals in english", 
            "title": "Java One 2015"
        }, 
        {
            "location": "/additionalinfos/#dynamic-proxies", 
            "text": "The book  Dynamic Proxies  from  Dr. Heinz Kabutz  and  Sven Ruppert", 
            "title": "Dynamic Proxies"
        }, 
        {
            "location": "/additionalinfos/#java-fundamentals", 
            "text": "A free german gitbook about Pattern and more  Java Fundamentals", 
            "title": "Java Fundamentals"
        }, 
        {
            "location": "/about/", 
            "text": "About\n\n\nBlog:\n \nwww.rapidpm.org\n\n\nWeb:\n \nwww.sven-ruppert.de\n\n\nTwitter:\n \n@SvenRuppert\n\n\nLandry:\n \nhttp://lanyrd.com/profile/svenruppert/\n\n\nPublications:\n \nhttp://www.rapidpm.org/publications/index.html\n\n\nTalks:\n \nhttp://www.rapidpm.org/conferences/index.html\n\n\nLinkedin:\n \nhttps://www.linkedin.com/in/svenruppert\n \n\n\nImpressum (for german law)\n\n\nAngaben gem\u00e4\u00df \u00a7 5 TMG:\n\n\nSven Ruppert\n\n\nHans-Keis-Str 41\n\n\n82049\n Pullach\n\n\nKontakt:\n\n\nTelefon:\n    491704546307\n\n\nE-Mail:\n sven.ruppert@gmail.com\n\n\nQuelle: http://www.e-recht24.de\n\n\nHaftungsausschluss (Disclaimer)\n\n\nHaftung f\u00fcr Inhalte\n\n\nAls Diensteanbieter sind wir gem\u00e4\u00df \u00a7 7 Abs.1 TMG f\u00fcr eigene Inhalte auf diesen Seiten nach den allgemeinen Gesetzen verantwortlich. Nach \u00a7\u00a7 8 bis 10 TMG sind wir als Diensteanbieter jedoch nicht verpflichtet, \u00fcbermittelte oder gespeicherte fremde Informationen zu \u00fcberwachen oder nach Umst\u00e4nden zu forschen, die auf eine rechtswidrige T\u00e4tigkeit hinweisen. Verpflichtungen zur Entfernung oder Sperrung der Nutzung von Informationen nach den allgemeinen Gesetzen bleiben hiervon unber\u00fchrt. Eine diesbez\u00fcgliche Haftung ist jedoch erst ab dem Zeitpunkt der Kenntnis einer konkreten Rechtsverletzung m\u00f6glich. Bei Bekanntwerden von entsprechenden Rechtsverletzungen werden wir diese Inhalte umgehend entfernen.\n\n\nHaftung f\u00fcr Links\n\n\nUnser Angebot enth\u00e4lt Links zu externen Webseiten Dritter, auf deren Inhalte wir keinen Einfluss haben. Deshalb k\u00f6nnen wir f\u00fcr diese fremden Inhalte auch keine Gew\u00e4hr \u00fcbernehmen. F\u00fcr die Inhalte der verlinkten Seiten ist stets der jeweilige Anbieter oder Betreiber der Seiten verantwortlich. Die verlinkten Seiten wurden zum Zeitpunkt der Verlinkung auf m\u00f6gliche Rechtsverst\u00f6\u00dfe \u00fcberpr\u00fcft. Rechtswidrige Inhalte waren zum Zeitpunkt der Verlinkung nicht erkennbar. Eine permanente inhaltliche Kontrolle der verlinkten Seiten ist jedoch ohne konkrete Anhaltspunkte einer Rechtsverletzung nicht zumutbar. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Links umgehend entfernen.\n\n\nUrheberrecht\n\n\nDie durch die Seitenbetreiber erstellten Inhalte und Werke auf diesen Seiten unterliegen dem deutschen Urheberrecht. Die Vervielf\u00e4ltigung, Bearbeitung, Verbreitung und jede Art der Verwertung au\u00dferhalb der Grenzen des Urheberrechtes bed\u00fcrfen der schriftlichen Zustimmung des jeweiligen Autors bzw. Erstellers. Downloads und Kopien dieser Seite sind nur f\u00fcr den privaten, nicht kommerziellen Gebrauch gestattet. Soweit die Inhalte auf dieser Seite nicht vom Betreiber erstellt wurden, werden die Urheberrechte Dritter beachtet. Insbesondere werden Inhalte Dritter als solche gekennzeichnet. Sollten Sie trotzdem auf eine Urheberrechtsverletzung aufmerksam werden, bitten wir um einen entsprechenden Hinweis. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Inhalte umgehend entfernen.\n\n\nQuellen: eRecht24\n\n\nDatenschutzerkl\u00e4rung:\n\n\nDatenschutz\n\n\nDie Nutzung unserer Webseite ist in der Regel ohne Angabe personenbezogener Daten m\u00f6glich. Soweit auf unseren Seiten personenbezogene Daten (beispielsweise Name, Anschrift oder eMail-Adressen) erhoben werden, erfolgt dies, soweit m\u00f6glich, stets auf freiwilliger Basis. Diese Daten werden ohne Ihre ausdr\u00fcckliche Zustimmung nicht an Dritte weitergegeben.\n\n\nWir weisen darauf hin, dass die Daten\u00fcbertragung im Internet (z.B. bei der Kommunikation per E-Mail) Sicherheitsl\u00fccken aufweisen kann. Ein l\u00fcckenloser Schutz der Daten vor dem Zugriff durch Dritte ist nicht m\u00f6glich.\n\n\nDer Nutzung von im Rahmen der Impressumspflicht ver\u00f6ffentlichten Kontaktdaten durch Dritte zur \u00dcbersendung von nicht ausdr\u00fccklich angeforderter Werbung und Informationsmaterialien wird hiermit ausdr\u00fccklich widersprochen. Die Betreiber der Seiten behalten sich ausdr\u00fccklich rechtliche Schritte im Falle der unverlangten Zusendung von Werbeinformationen, etwa durch Spam-Mails, vor.\n\n\nDatenschutzerkl\u00e4rung f\u00fcr die Nutzung von Facebook-Plugins (Like-Button)\n\n\nAuf unseren Seiten sind Plugins des sozialen Netzwerks Facebook (Facebook Inc., 1601 Willow Road, Menlo Park, California, 94025, USA) integriert. Die Facebook-Plugins erkennen Sie an dem Facebook-Logo oder dem \"Like-Button\" (\"Gef\u00e4llt mir\") auf unserer Seite. Eine \u00dcbersicht \u00fcber die Facebook-Plugins finden Sie hier: http://developers.facebook.com/docs/plugins/.\nWenn Sie unsere Seiten besuchen, wird \u00fcber das Plugin eine direkte Verbindung zwischen Ihrem Browser und dem Facebook-Server hergestellt. Facebook erh\u00e4lt dadurch die Information, dass Sie mit Ihrer IP-Adresse unsere Seite besucht haben. Wenn Sie den Facebook \"Like-Button\" anklicken w\u00e4hrend Sie in Ihrem Facebook-Account eingeloggt sind, k\u00f6nnen Sie die Inhalte unserer Seiten auf Ihrem Facebook-Profil verlinken. Dadurch kann Facebook den Besuch unserer Seiten Ihrem Benutzerkonto zuordnen. Wir weisen darauf hin, dass wir als Anbieter der Seiten keine Kenntnis vom Inhalt der \u00fcbermittelten Daten sowie deren Nutzung durch Facebook erhalten. Weitere Informationen hierzu finden Sie in der Datenschutzerkl\u00e4rung von facebook unter http://de-de.facebook.com/policy.php\n\n\nWenn Sie nicht w\u00fcnschen, dass Facebook den Besuch unserer Seiten Ihrem Facebook-Nutzerkonto zuordnen kann, loggen Sie sich bitte aus Ihrem Facebook-Benutzerkonto aus.\n\n\nDatenschutzerkl\u00e4rung f\u00fcr die Nutzung von Google Analytics\n\n\nDiese Website benutzt Google Analytics, einen Webanalysedienst der Google Inc. (\"Google\"). Google Analytics verwendet sog. \"Cookies\", Textdateien, die auf Ihrem Computer gespeichert werden und die eine Analyse der Benutzung der Website durch Sie erm\u00f6glichen. Die durch den Cookie erzeugten Informationen \u00fcber Ihre Benutzung dieser Website werden in der Regel an einen Server von Google in den USA \u00fcbertragen und dort gespeichert. Im Falle der Aktivierung der IP-Anonymisierung auf dieser Webseite wird Ihre IP-Adresse von Google jedoch innerhalb von Mitgliedstaaten der Europ\u00e4ischen Union oder in anderen Vertragsstaaten des Abkommens \u00fcber den Europ\u00e4ischen Wirtschaftsraum zuvor gek\u00fcrzt.\n\n\nNur in Ausnahmef\u00e4llen wird die volle IP-Adresse an einen Server von Google in den USA \u00fcbertragen und dort gek\u00fcrzt. Im Auftrag des Betreibers dieser Website wird Google diese Informationen benutzen, um Ihre Nutzung der Website auszuwerten, um Reports \u00fcber die Websiteaktivit\u00e4ten zusammenzustellen und um weitere mit der Websitenutzung und der Internetnutzung verbundene Dienstleistungen gegen\u00fcber dem Websitebetreiber zu erbringen. Die im Rahmen von Google Analytics von Ihrem Browser \u00fcbermittelte IP-Adresse wird nicht mit anderen Daten von Google zusammengef\u00fchrt.\n\n\nSie k\u00f6nnen die Speicherung der Cookies durch eine entsprechende Einstellung Ihrer Browser-Software verhindern; wir weisen Sie jedoch darauf hin, dass Sie in diesem Fall gegebenenfalls nicht s\u00e4mtliche Funktionen dieser Website vollumf\u00e4nglich werden nutzen k\u00f6nnen. Sie k\u00f6nnen dar\u00fcber hinaus die Erfassung der durch das Cookie erzeugten und auf Ihre Nutzung der Website bezogenen Daten (inkl. Ihrer IP-Adresse) an Google sowie die Verarbeitung dieser Daten durch Google verhindern, indem sie das unter dem folgenden Link verf\u00fcgbare Browser-Plugin herunterladen und installieren: http://tools.google.com/dlpage/gaoptout?hl=de.\n\n\nDatenschutzerkl\u00e4rung f\u00fcr die Nutzung von Google Adsense\n\n\nDiese Website benutzt Google AdSense, einen Dienst zum Einbinden von Werbeanzeigen der Google Inc. (\"Google\"). Google AdSense verwendet sog. \"Cookies\", Textdateien, die auf Ihrem Computer gespeichert werden und die eine Analyse der Benutzung der Website erm\u00f6glicht. Google AdSense verwendet auch so genannte Web Beacons (unsichtbare Grafiken). Durch diese Web Beacons k\u00f6nnen Informationen wie der Besucherverkehr auf diesen Seiten ausgewertet werden.\n\n\nDie durch Cookies und Web Beacons erzeugten Informationen \u00fcber die Benutzung dieser Website (einschlie\u00dflich Ihrer IP-Adresse) und Auslieferung von Werbeformaten werden an einen Server von Google in den USA \u00fcbertragen und dort gespeichert. Diese Informationen k\u00f6nnen von Google an Vertragspartner von Google weiter gegeben werden. Google wird Ihre IP-Adresse jedoch nicht mit anderen von Ihnen gespeicherten Daten zusammenf\u00fchren.\n\n\nSie k\u00f6nnen die Installation der Cookies durch eine entsprechende Einstellung Ihrer Browser Software verhindern; wir weisen Sie jedoch darauf hin, dass Sie in diesem Fall gegebenenfalls nicht s\u00e4mtliche Funktionen dieser Website voll umf\u00e4nglich nutzen k\u00f6nnen. Durch die Nutzung dieser Website erkl\u00e4ren Sie sich mit der Bearbeitung der \u00fcber Sie erhobenen Daten durch Google in der zuvor beschriebenen Art und Weise und zu dem zuvor benannten Zweck einverstanden.\n\n\nDatenschutzerkl\u00e4rung f\u00fcr die Nutzung von Google +1\n\n\nErfassung und Weitergabe von Informationen:\nMithilfe der Google +1-Schaltfl\u00e4che k\u00f6nnen Sie Informationen weltweit ver\u00f6ffentlichen. \u00dcber die Google +1-Schaltfl\u00e4che erhalten Sie und andere Nutzer personalisierte Inhalte von Google und unseren Partnern. Google speichert sowohl die Information, dass Sie f\u00fcr einen Inhalt +1 gegeben haben, als auch Informationen \u00fcber die Seite, die Sie beim Klicken auf +1 angesehen haben. Ihre +1 k\u00f6nnen als Hinweise zusammen mit Ihrem Profilnamen und Ihrem Foto in Google-Diensten, wie etwa in Suchergebnissen oder in Ihrem Google-Profil, oder an anderen Stellen auf Websites und Anzeigen im Internet eingeblendet werden.\nGoogle zeichnet Informationen \u00fcber Ihre +1-Aktivit\u00e4ten auf, um die Google-Dienste f\u00fcr Sie und andere zu verbessern. Um die Google +1-Schaltfl\u00e4che verwenden zu k\u00f6nnen, ben\u00f6tigen Sie ein weltweit sichtbares, \u00f6ffentliches Google-Profil, das zumindest den f\u00fcr das Profil gew\u00e4hlten Namen enthalten muss. Dieser Name wird in allen Google-Diensten verwendet. In manchen F\u00e4llen kann dieser Name auch einen anderen Namen ersetzen, den Sie beim Teilen von Inhalten \u00fcber Ihr Google-Konto verwendet haben. Die Identit\u00e4t Ihres Google-Profils kann Nutzern angezeigt werden, die Ihre E-Mail-Adresse kennen oder \u00fcber andere identifizierende Informationen von Ihnen verf\u00fcgen.\n\n\nVerwendung der erfassten Informationen:\nNeben den oben erl\u00e4uterten Verwendungszwecken werden die von Ihnen bereitgestellten Informationen gem\u00e4\u00df den geltenden Google-Datenschutzbestimmungen genutzt. Google ver\u00f6ffentlicht m\u00f6glicherweise zusammengefasste Statistiken \u00fcber die +1-Aktivit\u00e4ten der Nutzer bzw. gibt diese an Nutzer und Partner weiter, wie etwa Publisher, Inserenten oder verbundene Websites.\n\n\nDatenschutzerkl\u00e4rung f\u00fcr die Nutzung von Twitter\n\n\nAuf unseren Seiten sind Funktionen des Dienstes Twitter eingebunden. Diese Funktionen werden angeboten durch die Twitter Inc., Twitter, Inc. 1355 Market St, Suite 900, San Francisco, CA 94103, USA. Durch das Benutzen von Twitter und der Funktion \"Re-Tweet\" werden die von Ihnen besuchten Webseiten mit Ihrem Twitter-Account verkn\u00fcpft und anderen Nutzern bekannt gegeben. Dabei werden auch Daten an Twitter \u00fcbertragen.\n\n\nWir weisen darauf hin, dass wir als Anbieter der Seiten keine Kenntnis vom Inhalt der \u00fcbermittelten Daten sowie deren Nutzung durch Twitter erhalten. Weitere Informationen hierzu finden Sie in der Datenschutzerkl\u00e4rung von Twitter unter http://twitter.com/privacy.\n\n\nIhre Datenschutzeinstellungen bei Twitter k\u00f6nnen Sie in den Konto-Einstellungen unter http://twitter.com/account/settings \u00e4ndern.\n\n\nQuellenangaben: eRecht24, Facebook Datenschutzerkl\u00e4rung, Datenschutzerkl\u00e4rung f\u00fcr Google Analytics, Google Adsense Haftungsausschluss, Google +1 Datenschutzerkl\u00e4rung, Datenschutzerkl\u00e4rung f\u00fcr Twitter", 
            "title": "About"
        }, 
        {
            "location": "/about/#about", 
            "text": "Blog:   www.rapidpm.org  Web:   www.sven-ruppert.de  Twitter:   @SvenRuppert  Landry:   http://lanyrd.com/profile/svenruppert/  Publications:   http://www.rapidpm.org/publications/index.html  Talks:   http://www.rapidpm.org/conferences/index.html  Linkedin:   https://www.linkedin.com/in/svenruppert", 
            "title": "About"
        }, 
        {
            "location": "/about/#impressum-for-german-law", 
            "text": "Angaben gem\u00e4\u00df \u00a7 5 TMG:  Sven Ruppert  Hans-Keis-Str 41  82049  Pullach  Kontakt:  Telefon:     491704546307  E-Mail:  sven.ruppert@gmail.com  Quelle: http://www.e-recht24.de", 
            "title": "Impressum (for german law)"
        }, 
        {
            "location": "/about/#haftungsausschluss-disclaimer", 
            "text": "Haftung f\u00fcr Inhalte  Als Diensteanbieter sind wir gem\u00e4\u00df \u00a7 7 Abs.1 TMG f\u00fcr eigene Inhalte auf diesen Seiten nach den allgemeinen Gesetzen verantwortlich. Nach \u00a7\u00a7 8 bis 10 TMG sind wir als Diensteanbieter jedoch nicht verpflichtet, \u00fcbermittelte oder gespeicherte fremde Informationen zu \u00fcberwachen oder nach Umst\u00e4nden zu forschen, die auf eine rechtswidrige T\u00e4tigkeit hinweisen. Verpflichtungen zur Entfernung oder Sperrung der Nutzung von Informationen nach den allgemeinen Gesetzen bleiben hiervon unber\u00fchrt. Eine diesbez\u00fcgliche Haftung ist jedoch erst ab dem Zeitpunkt der Kenntnis einer konkreten Rechtsverletzung m\u00f6glich. Bei Bekanntwerden von entsprechenden Rechtsverletzungen werden wir diese Inhalte umgehend entfernen.  Haftung f\u00fcr Links  Unser Angebot enth\u00e4lt Links zu externen Webseiten Dritter, auf deren Inhalte wir keinen Einfluss haben. Deshalb k\u00f6nnen wir f\u00fcr diese fremden Inhalte auch keine Gew\u00e4hr \u00fcbernehmen. F\u00fcr die Inhalte der verlinkten Seiten ist stets der jeweilige Anbieter oder Betreiber der Seiten verantwortlich. Die verlinkten Seiten wurden zum Zeitpunkt der Verlinkung auf m\u00f6gliche Rechtsverst\u00f6\u00dfe \u00fcberpr\u00fcft. Rechtswidrige Inhalte waren zum Zeitpunkt der Verlinkung nicht erkennbar. Eine permanente inhaltliche Kontrolle der verlinkten Seiten ist jedoch ohne konkrete Anhaltspunkte einer Rechtsverletzung nicht zumutbar. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Links umgehend entfernen.  Urheberrecht  Die durch die Seitenbetreiber erstellten Inhalte und Werke auf diesen Seiten unterliegen dem deutschen Urheberrecht. Die Vervielf\u00e4ltigung, Bearbeitung, Verbreitung und jede Art der Verwertung au\u00dferhalb der Grenzen des Urheberrechtes bed\u00fcrfen der schriftlichen Zustimmung des jeweiligen Autors bzw. Erstellers. Downloads und Kopien dieser Seite sind nur f\u00fcr den privaten, nicht kommerziellen Gebrauch gestattet. Soweit die Inhalte auf dieser Seite nicht vom Betreiber erstellt wurden, werden die Urheberrechte Dritter beachtet. Insbesondere werden Inhalte Dritter als solche gekennzeichnet. Sollten Sie trotzdem auf eine Urheberrechtsverletzung aufmerksam werden, bitten wir um einen entsprechenden Hinweis. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Inhalte umgehend entfernen.  Quellen: eRecht24  Datenschutzerkl\u00e4rung:  Datenschutz  Die Nutzung unserer Webseite ist in der Regel ohne Angabe personenbezogener Daten m\u00f6glich. Soweit auf unseren Seiten personenbezogene Daten (beispielsweise Name, Anschrift oder eMail-Adressen) erhoben werden, erfolgt dies, soweit m\u00f6glich, stets auf freiwilliger Basis. Diese Daten werden ohne Ihre ausdr\u00fcckliche Zustimmung nicht an Dritte weitergegeben.  Wir weisen darauf hin, dass die Daten\u00fcbertragung im Internet (z.B. bei der Kommunikation per E-Mail) Sicherheitsl\u00fccken aufweisen kann. Ein l\u00fcckenloser Schutz der Daten vor dem Zugriff durch Dritte ist nicht m\u00f6glich.  Der Nutzung von im Rahmen der Impressumspflicht ver\u00f6ffentlichten Kontaktdaten durch Dritte zur \u00dcbersendung von nicht ausdr\u00fccklich angeforderter Werbung und Informationsmaterialien wird hiermit ausdr\u00fccklich widersprochen. Die Betreiber der Seiten behalten sich ausdr\u00fccklich rechtliche Schritte im Falle der unverlangten Zusendung von Werbeinformationen, etwa durch Spam-Mails, vor.  Datenschutzerkl\u00e4rung f\u00fcr die Nutzung von Facebook-Plugins (Like-Button)  Auf unseren Seiten sind Plugins des sozialen Netzwerks Facebook (Facebook Inc., 1601 Willow Road, Menlo Park, California, 94025, USA) integriert. Die Facebook-Plugins erkennen Sie an dem Facebook-Logo oder dem \"Like-Button\" (\"Gef\u00e4llt mir\") auf unserer Seite. Eine \u00dcbersicht \u00fcber die Facebook-Plugins finden Sie hier: http://developers.facebook.com/docs/plugins/.\nWenn Sie unsere Seiten besuchen, wird \u00fcber das Plugin eine direkte Verbindung zwischen Ihrem Browser und dem Facebook-Server hergestellt. Facebook erh\u00e4lt dadurch die Information, dass Sie mit Ihrer IP-Adresse unsere Seite besucht haben. Wenn Sie den Facebook \"Like-Button\" anklicken w\u00e4hrend Sie in Ihrem Facebook-Account eingeloggt sind, k\u00f6nnen Sie die Inhalte unserer Seiten auf Ihrem Facebook-Profil verlinken. Dadurch kann Facebook den Besuch unserer Seiten Ihrem Benutzerkonto zuordnen. Wir weisen darauf hin, dass wir als Anbieter der Seiten keine Kenntnis vom Inhalt der \u00fcbermittelten Daten sowie deren Nutzung durch Facebook erhalten. Weitere Informationen hierzu finden Sie in der Datenschutzerkl\u00e4rung von facebook unter http://de-de.facebook.com/policy.php  Wenn Sie nicht w\u00fcnschen, dass Facebook den Besuch unserer Seiten Ihrem Facebook-Nutzerkonto zuordnen kann, loggen Sie sich bitte aus Ihrem Facebook-Benutzerkonto aus.  Datenschutzerkl\u00e4rung f\u00fcr die Nutzung von Google Analytics  Diese Website benutzt Google Analytics, einen Webanalysedienst der Google Inc. (\"Google\"). Google Analytics verwendet sog. \"Cookies\", Textdateien, die auf Ihrem Computer gespeichert werden und die eine Analyse der Benutzung der Website durch Sie erm\u00f6glichen. Die durch den Cookie erzeugten Informationen \u00fcber Ihre Benutzung dieser Website werden in der Regel an einen Server von Google in den USA \u00fcbertragen und dort gespeichert. Im Falle der Aktivierung der IP-Anonymisierung auf dieser Webseite wird Ihre IP-Adresse von Google jedoch innerhalb von Mitgliedstaaten der Europ\u00e4ischen Union oder in anderen Vertragsstaaten des Abkommens \u00fcber den Europ\u00e4ischen Wirtschaftsraum zuvor gek\u00fcrzt.  Nur in Ausnahmef\u00e4llen wird die volle IP-Adresse an einen Server von Google in den USA \u00fcbertragen und dort gek\u00fcrzt. Im Auftrag des Betreibers dieser Website wird Google diese Informationen benutzen, um Ihre Nutzung der Website auszuwerten, um Reports \u00fcber die Websiteaktivit\u00e4ten zusammenzustellen und um weitere mit der Websitenutzung und der Internetnutzung verbundene Dienstleistungen gegen\u00fcber dem Websitebetreiber zu erbringen. Die im Rahmen von Google Analytics von Ihrem Browser \u00fcbermittelte IP-Adresse wird nicht mit anderen Daten von Google zusammengef\u00fchrt.  Sie k\u00f6nnen die Speicherung der Cookies durch eine entsprechende Einstellung Ihrer Browser-Software verhindern; wir weisen Sie jedoch darauf hin, dass Sie in diesem Fall gegebenenfalls nicht s\u00e4mtliche Funktionen dieser Website vollumf\u00e4nglich werden nutzen k\u00f6nnen. Sie k\u00f6nnen dar\u00fcber hinaus die Erfassung der durch das Cookie erzeugten und auf Ihre Nutzung der Website bezogenen Daten (inkl. Ihrer IP-Adresse) an Google sowie die Verarbeitung dieser Daten durch Google verhindern, indem sie das unter dem folgenden Link verf\u00fcgbare Browser-Plugin herunterladen und installieren: http://tools.google.com/dlpage/gaoptout?hl=de.  Datenschutzerkl\u00e4rung f\u00fcr die Nutzung von Google Adsense  Diese Website benutzt Google AdSense, einen Dienst zum Einbinden von Werbeanzeigen der Google Inc. (\"Google\"). Google AdSense verwendet sog. \"Cookies\", Textdateien, die auf Ihrem Computer gespeichert werden und die eine Analyse der Benutzung der Website erm\u00f6glicht. Google AdSense verwendet auch so genannte Web Beacons (unsichtbare Grafiken). Durch diese Web Beacons k\u00f6nnen Informationen wie der Besucherverkehr auf diesen Seiten ausgewertet werden.  Die durch Cookies und Web Beacons erzeugten Informationen \u00fcber die Benutzung dieser Website (einschlie\u00dflich Ihrer IP-Adresse) und Auslieferung von Werbeformaten werden an einen Server von Google in den USA \u00fcbertragen und dort gespeichert. Diese Informationen k\u00f6nnen von Google an Vertragspartner von Google weiter gegeben werden. Google wird Ihre IP-Adresse jedoch nicht mit anderen von Ihnen gespeicherten Daten zusammenf\u00fchren.  Sie k\u00f6nnen die Installation der Cookies durch eine entsprechende Einstellung Ihrer Browser Software verhindern; wir weisen Sie jedoch darauf hin, dass Sie in diesem Fall gegebenenfalls nicht s\u00e4mtliche Funktionen dieser Website voll umf\u00e4nglich nutzen k\u00f6nnen. Durch die Nutzung dieser Website erkl\u00e4ren Sie sich mit der Bearbeitung der \u00fcber Sie erhobenen Daten durch Google in der zuvor beschriebenen Art und Weise und zu dem zuvor benannten Zweck einverstanden.  Datenschutzerkl\u00e4rung f\u00fcr die Nutzung von Google +1  Erfassung und Weitergabe von Informationen:\nMithilfe der Google +1-Schaltfl\u00e4che k\u00f6nnen Sie Informationen weltweit ver\u00f6ffentlichen. \u00dcber die Google +1-Schaltfl\u00e4che erhalten Sie und andere Nutzer personalisierte Inhalte von Google und unseren Partnern. Google speichert sowohl die Information, dass Sie f\u00fcr einen Inhalt +1 gegeben haben, als auch Informationen \u00fcber die Seite, die Sie beim Klicken auf +1 angesehen haben. Ihre +1 k\u00f6nnen als Hinweise zusammen mit Ihrem Profilnamen und Ihrem Foto in Google-Diensten, wie etwa in Suchergebnissen oder in Ihrem Google-Profil, oder an anderen Stellen auf Websites und Anzeigen im Internet eingeblendet werden.\nGoogle zeichnet Informationen \u00fcber Ihre +1-Aktivit\u00e4ten auf, um die Google-Dienste f\u00fcr Sie und andere zu verbessern. Um die Google +1-Schaltfl\u00e4che verwenden zu k\u00f6nnen, ben\u00f6tigen Sie ein weltweit sichtbares, \u00f6ffentliches Google-Profil, das zumindest den f\u00fcr das Profil gew\u00e4hlten Namen enthalten muss. Dieser Name wird in allen Google-Diensten verwendet. In manchen F\u00e4llen kann dieser Name auch einen anderen Namen ersetzen, den Sie beim Teilen von Inhalten \u00fcber Ihr Google-Konto verwendet haben. Die Identit\u00e4t Ihres Google-Profils kann Nutzern angezeigt werden, die Ihre E-Mail-Adresse kennen oder \u00fcber andere identifizierende Informationen von Ihnen verf\u00fcgen.  Verwendung der erfassten Informationen:\nNeben den oben erl\u00e4uterten Verwendungszwecken werden die von Ihnen bereitgestellten Informationen gem\u00e4\u00df den geltenden Google-Datenschutzbestimmungen genutzt. Google ver\u00f6ffentlicht m\u00f6glicherweise zusammengefasste Statistiken \u00fcber die +1-Aktivit\u00e4ten der Nutzer bzw. gibt diese an Nutzer und Partner weiter, wie etwa Publisher, Inserenten oder verbundene Websites.  Datenschutzerkl\u00e4rung f\u00fcr die Nutzung von Twitter  Auf unseren Seiten sind Funktionen des Dienstes Twitter eingebunden. Diese Funktionen werden angeboten durch die Twitter Inc., Twitter, Inc. 1355 Market St, Suite 900, San Francisco, CA 94103, USA. Durch das Benutzen von Twitter und der Funktion \"Re-Tweet\" werden die von Ihnen besuchten Webseiten mit Ihrem Twitter-Account verkn\u00fcpft und anderen Nutzern bekannt gegeben. Dabei werden auch Daten an Twitter \u00fcbertragen.  Wir weisen darauf hin, dass wir als Anbieter der Seiten keine Kenntnis vom Inhalt der \u00fcbermittelten Daten sowie deren Nutzung durch Twitter erhalten. Weitere Informationen hierzu finden Sie in der Datenschutzerkl\u00e4rung von Twitter unter http://twitter.com/privacy.  Ihre Datenschutzeinstellungen bei Twitter k\u00f6nnen Sie in den Konto-Einstellungen unter http://twitter.com/account/settings \u00e4ndern.  Quellenangaben: eRecht24, Facebook Datenschutzerkl\u00e4rung, Datenschutzerkl\u00e4rung f\u00fcr Google Analytics, Google Adsense Haftungsausschluss, Google +1 Datenschutzerkl\u00e4rung, Datenschutzerkl\u00e4rung f\u00fcr Twitter", 
            "title": "Haftungsausschluss (Disclaimer)"
        }
    ]
}